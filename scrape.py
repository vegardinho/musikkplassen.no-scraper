# -*- coding: utf-8 -*-

from urllib.parse import urljoin
from scrape_tools import scrape_site
import re
import textwrap


FINNNO_BASE_URL = 'https://musikkplassen.no/'
PUSHOVER_TOKEN = 'afuaaowiun2i9jaub6phwi3kgfupw4'
SITE_NAME = 'Musikkplassen.no'


def main():
    print('test')
    scrape_site(get_elements, get_attrs, get_next_page, SITE_NAME, aprt_string_format,
                pushover_token=PUSHOVER_TOKEN, max_notifi_entries=2)


def aprt_string_format(ad_link, search_link, ad_dict):
    description = ad_dict["description"][:175] + (ad_dict["description"][175:] and ' ...')
    see_ad = ad_link.replace(ad_dict["title"], 'Se annonsen')
    return f'<b>{ad_link}</b> â€“ {ad_dict["address"].ljust(30)}\n<i>{description}</i>\n{see_ad}\n'


def get_elements(page):
    return page.find('div', class_='post-columns').find_all('div', class_='post-medium')


def get_attrs(ad, ads_dict, search):
    href = ad.find('a').attrs['href']
    ad_id = re.search('(?<=\/)\d*(?=\/)', href).group()
    post_date = ad.find('div', class_='post-date').get_text(strip=True)

    text = [a.get_text(strip=True) for a in ad.find('div', class_='actor-info').findChildren()]
    type = text[0]
    address = text[1]
    title = text[3]
    descr = text[4]

    ads_dict[ad_id] = dict(
        href=href,
        title=title,
        address=address,
        type=type,
        description=descr,
        post_date=post_date,
        search=search
    )

    return ads_dict


# Page url generated by site script, so has to reverse engineer url
def get_next_page(page, page_url):
    page_count = page.find('div', class_='w-page-count page-count').get_text(strip=True)
    cur_count = int(re.search('\d*(?=\s)', page_count).group())
    max_count = int(re.search('(?<=\s)\d*(?=$)', page_count).group())

    if cur_count == max_count:
        return None

    if cur_count == 1:
        page = page_url + '&pageno=2'
    else:
        page = f'{page_url[:-1]}{cur_count + 1}'

    return page


if __name__ == '__main__':
    main()
